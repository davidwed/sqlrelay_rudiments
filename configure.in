dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/daemonprocess.C)


AC_ARG_ENABLE(small-code,
	[  --enable-small-code     optimize for small code size],
	SMALLCODE="-O -Os",
	SMALLCODE="")
AC_ARG_ENABLE(debug,
	[  --enable-debug          compile with -g and -pg options and don't strip binaries],
	CXXFLAGS="-g -pg -fno-exceptions -Wall"; INSTALLSTRIP=""; DEBUGSTRIP="touch",
	CXXFLAGS="-fomit-frame-pointer -fno-exceptions -Wall"; INSTALLSTRIP="-s"; DEBUGSTRIP="")
AC_ARG_WITH(system-libtool,
	[  --with-system-libtool   use system libtool instead of ./libtool],
	USE_SYSTEM_LIBTOOL=$withval,
	USE_SYSTEM_LIBTOOL="no")
AC_ARG_ENABLE(inlines,
	[  --enable-inlines        use inline methods],
	ENABLE_RUDIMENTS_INLINES="yes",
	ENABLE_RUDIMENTS_INLINES="no")
AC_ARG_WITH(pthread-prefix,
	[  --with-pthread-prefix   Location of pthread library],
	PTHREADPATH="$withval",
	PTHREADPATH="")
AC_ARG_ENABLE(ssl,
	[  --disable-ssl           Disable SSL support],
	ENABLE_RUDIMENTS_SSL="no",
	ENABLE_RUDIMENTS_SSL="yes")
AC_ARG_WITH(ssl-includes,
	[  --with-ssl-includes     SSL includes],
	SSLINCLUDES="$withval",
	SSLINCLUDES="")
AC_ARG_WITH(ssl-libs,
	[  --with-ssl-libs         SSL libraries],
	SSLLIBS="$withval",
	SSLLIBS="")
AC_ARG_ENABLE(pcre,
	[  --disable-pcre          Don't use PCRE for regular expressions],
	ENABLE_RUDIMENTS_PCRE="no",
	ENABLE_RUDIMENTS_PCRE="yes")
AC_ARG_WITH(pcre-includes,
	[  --with-pcre-includes    PCRE includes],
	PCREINCLUDES="$withval",
	PCREINCLUDES="")
AC_ARG_WITH(pcre-libs,
	[  --with-pcre-libs        PCRE libraries],
	PCRELIBS="$withval",
	PCRELIBS="")
AC_ARG_ENABLE(threads,
	[  --disable-threads       Disable thread support],
	ENABLE_RUDIMENTS_THREADS="no",
	ENABLE_RUDIMENTS_THREADS="yes")

AC_SUBST(CXXFLAGS)
AC_SUBST(INSTALLSTRIP)
AC_SUBST(SMALLCODE)
if ( test -n "$SMALLCODE" ); then
	AC_DEFINE_UNQUOTED(SMALL_CODE,1,Use small rather than fast code)
fi



dnl Additional defines.
if ( test "$ENABLE_RUDIMENTS_INLINES" = "yes" ); then
	AC_DEFINE_UNQUOTED(ENABLE_RUDIMENTS_INLINES,1,Use inline functions or not)
fi


dnl Checks for programs.
echo
echo "***** Programs ***************"
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_LANG(C++)
echo "******************************"



dnl Checks for libtool.
echo
echo "***** Libtool ****************"
OLDCC=$CC
CC=$CXX
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
FW_CHECK_USE_SYSTEM_LIBTOOL
CC=$OLDCC

dnl have to set ar here because libtool (currently) fails
dnl to use the correct one when cross-compiling
AC_CHECK_PROG(AR,$host_alias-ar,$host_alias-ar,ar)
AC_SUBST(AR)

if ( test -n "$DEBUGSTRIP" )
then
	STRIP="$DEBUGSTRIP"
	AC_SUBST(STRIP)
fi

FW_CHECK_GNU_STRIP
FW_CHECK_PIPE

FW_CHECK_SO_EXT
echo "******************************"



dnl Checks for header files.
echo
echo "***** Headers ****************"
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h netdb.h netinet/in.h stddef.h stdlib.h string.h strings.h sys/socket.h sys/time.h syslog.h unistd.h regex.h regexp.h libgen.h regexpr.h sys/times.h sys/select.h])
echo "******************************"


dnl Checks for thread library.
echo
echo "***** threads ****************"
FW_CHECK_PTHREAD
echo "******************************"


dnl Checks for ssl library.
echo
echo "***** ssl ********************"
FW_CHECK_SSL
echo "******************************"


dnl Checks for ssl library.
echo
echo "***** pcre *******************"
FW_CHECK_PCRE
echo "******************************"


dnl Checks for typedefs, structures, and compiler characteristics.
echo
echo "***** Structures *************"
AC_C_CONST
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_MSG_CHECKING(for socklen_t)
AC_EGREP_CPP(socklen_t,[#include <sys/socket.h>],AC_MSG_RESULT(yes),AC_MSG_RESULT(no); AC_DEFINE(socklen_t, int, Some systems don't define socklen_t))
AC_MSG_CHECKING(for union semun)
AC_EGREP_CPP(union semun,[#include <sys/sem.h>],AC_DEFINE(HAVE_SEMUN,1,Some systems define union semun) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(for struct msghdr.msg_controllen)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/socket.h>],
struct msghdr m; m.msg_controllen=0;,AC_DEFINE(HAVE_MSGHDR_MSG_CONTROLLEN,1,Some msghdr structs have a msg_controllen member) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(if struct stat contains st_blksize)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>],
struct stat st;
blksize_t s=st.st_blksize;,AC_DEFINE(HAVE_BLKSIZE_T,1,Some systems don't have st_blksize in struct stat) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(if struct stat contains st_blocks)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>],
struct stat st;
blkcnt_t b=st.st_blocks;,AC_DEFINE(HAVE_BLKCNT_T,1,Some systems don't have st_blocks in struct stat) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(if S_ISSOCK exists)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>],
S_ISSOCK(0);,AC_DEFINE(HAVE_S_ISSOCK,1,Some systems don't have S_ISSOCK) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
AC_MSG_CHECKING(type of iovec.iov_base)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/socket.h>],
struct iovec iov; iov.iov_base=(void *)" ";,AC_DEFINE(IOV_BASE_TYPE,void *,iov_base is void *) AC_MSG_RESULT(void *), AC_DEFINE(IOV_BASE_TYPE,char *,iov_base is char *) AC_MSG_RESULT(char *))
FW_STATFS
echo "******************************"


dnl Checks associated with signal handlers
echo
echo "***** Signal Handlers ********"
AC_TYPE_SIGNAL
AC_MSG_CHECKING(signal handler parameter)
AC_TRY_LINK([#include <signal.h>],
void (*handler)(int); struct sigaction test; test.sa_handler=handler;,AC_DEFINE(SIGNAL_HANDLER_INT,1,Most systems define signal handlers with an integer parameter) AC_MSG_RESULT(int),AC_MSG_RESULT(void))
echo "******************************"


dnl Checks associated with time structure
echo
echo "***** Time Structure *********"
AC_HEADER_TIME
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_MSG_CHECKING(tm_zone)
AC_EGREP_CPP(tm_zone,[#include <time.h>],AC_DEFINE(HAS_TM_ZONE,1,Some systems define tm_zone in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(tm_gmtoff)
AC_EGREP_CPP(tm_gmtoff,[#include <time.h>],AC_DEFINE(HAS_TM_GMTOFF,1,Some systems define tm_gmtoff in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(__tm_zone)
AC_EGREP_CPP(__tm_zone,[#include <time.h>],AC_DEFINE(HAS___TM_ZONE,1,Some systems define __tm_zone in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(__tm_gmtoff)
AC_EGREP_CPP(__tm_gmtoff,[#include <time.h>],AC_DEFINE(HAS___TM_GMTOFF,1,Some systems define __tm_gmtoff in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(timezone)
AC_TRY_LINK([#include <time.h>],
long	t=-timezone;,AC_DEFINE(HAS_TIMEZONE,1,Some systems use _timezone instead of timezone) AC_MSG_RESULT(yes),AC_MSG_RESULT(no))

AC_MSG_CHECKING(tm_name)
AC_EGREP_CPP(tm_name,[#include <time.h>],AC_DEFINE(HAS_TM_NAME,1,Some systems define tm_name in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(tm_tzadj)
AC_EGREP_CPP(tm_tzadj,[#include <time.h>],AC_DEFINE(HAS_TM_TZADJ,1,Some systems define tm_tzadj in their struct tm) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(real-time-clock support)
AC_TRY_LINK([#include <linux/rtc.h>
#include <sys/ioctl.h>],
ioctl(0,RTC_RD_TIME,0);,AC_DEFINE(HAVE_RTC,1,Do we have a real-time-clock) AC_MSG_RESULT(yes),AC_MSG_RESULT(no))

AC_MSG_CHECKING(localtime_r)
AC_TRY_LINK([#include <time.h>,
#include <stdlib.h>],
localtime_r(NULL,NULL);,AC_DEFINE(HAVE_LOCALTIME_R,1,Some systems have localtime_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

echo "******************************"


dnl Checks for library functions.
echo
echo "***** Functions **************"
AC_LANG(C)
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_MMAP
AC_CHECK_FUNCS(regcomp regcmp re_comp sem_open setenv putenv unsetenv)

AC_LANG(C++)
AC_MSG_CHECKING(if setsockopt takes a const void * parameter)
AC_TRY_LINK([#include <sys/types.h>
#include <sys/socket.h>],
setsockopt(0,0,0,(const void *)NULL,0);,AC_DEFINE(SETSOCKOPT_OPTVAL_TYPE, const void *, setsockopt takes a const void * on most systems ) AC_MSG_RESULT(yes), AC_DEFINE(SETSOCKOPT_OPTVAL_TYPE, const char *, setsockopt takes a const void * on most systems ) AC_MSG_RESULT(no))
AC_LANG(C)

AC_MSG_CHECKING(srand48)
AC_TRY_LINK([#include <stdlib.h>],
srand48(0);,AC_DEFINE(HAVE_SRAND48,1,Some systems have srand48) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(lrand48)
AC_TRY_LINK([#include <stdlib.h>],
lrand48();,AC_DEFINE(HAVE_LRAND48,1,Some systems have lrand48) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(srand)
AC_TRY_LINK([#include <stdlib.h>],
srand(0);,AC_DEFINE(HAVE_SRAND,1,Some systems have srand) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(rand)
AC_TRY_LINK([#include <stdlib.h>],
rand();,AC_DEFINE(HAVE_RAND,1,Some systems have rand) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(rand_r)
AC_TRY_LINK([#include <stdlib.h>],
rand_r(0);,AC_DEFINE(HAVE_RAND_R,1,Some systems have rand_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(setuid)
AC_TRY_LINK([#include <sys/types.h>
#include <unistd.h>],
setuid(0);,AC_DEFINE(HAVE_SETUID,1,Some systems have setuid) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(setgid)
AC_TRY_LINK([#include <sys/types.h>
#include <unistd.h>],
setgid(0);,AC_DEFINE(HAVE_SETGID,1,Some systems have setgid) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

#AC_CHECK_LIB(socket,socket,SOCKETLIB=-lsocket,SOCKETLIB="")
#AC_SUBST(SOCKETLIB)
dnl AC_CHECK_LIB(xnet,gethostbyname,XNETLIB=-lxnet,XNETLIB="")
dnl AC_SUBST(XNETLIB)
dnl AC_CHECK_LIB(nsl,gethostbyname,NSLLIB=-lnsl,NSLLIB="")
FW_CHECK_XNET_PROTOTYPES
FW_CHECK_SOCKET_LIBS

OLDLIBS="$LIBS"
LIBS="$LIBS $SOCKETLIBS"

AC_LANG(C++)
AC_MSG_CHECKING(getpwnam_r)
AC_TRY_LINK([#include <pwd.h>
#include <stdlib.h>],
getpwnam_r(NULL,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETPWNAM_R,1,Some systems have getpwnam_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getpwuid_r)
AC_TRY_LINK([#include <pwd.h>
#include <stdlib.h>],
getpwuid_r(0,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETPWUID_R,1,Some systems have getpwuid_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getgrnam_r)
AC_TRY_LINK([#include <grp.h>
#include <stdlib.h>],
getgrnam_r(NULL,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETGRNAM_R,1,Some systems have getgrnam_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getgrgid_r)
AC_TRY_LINK([#include <grp.h>
#include <stdlib.h>],
getgrgid_r(0,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETGRGID_R,1,Some systems have getgrgid_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getaddrinfo)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
getaddrinfo(NULL,NULL,NULL,NULL);,AC_DEFINE(HAVE_GETADDRINFO,1,Some systems have getaddrinfo) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(gethostbyname_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
gethostbyname_r(NULL,NULL,NULL,0,NULL,NULL);,AC_DEFINE(HAVE_GETHOSTBYNAME_R,1,Some systems have gethostbyname_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(gethostbyaddr_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
gethostbyaddr_r(NULL,0,0,NULL,NULL,0,NULL,NULL);,AC_DEFINE(HAVE_GETHOSTBYADDR_R,1,Some systems have gethostbyaddr_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getprotobyname_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
getprotobyname_r(NULL,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETPROTOBYNAME_R,1,Some systems have getprotobyname_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getprotobynumber_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
getprotobynumber_r(0,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETPROTOBYNUMBER_R,1,Some systems have getprotobynumber_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

FW_CHECK_SHADOW

AC_MSG_CHECKING(getservbyname_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
getservbyname_r(NULL,NULL,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETSERVBYNAME_R,1,Some systems have getservbyname_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(getservbyport_r)
AC_TRY_LINK([#include <netdb.h>
#include <stdlib.h>],
getservbyport_r(0,NULL,NULL,NULL,0,NULL);,AC_DEFINE(HAVE_GETSERVBYPORT_R,1,Some systems have getservbyport_r) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_MSG_CHECKING(semtimedop)
AC_TRY_LINK([#include <stdlib.h>
#include <sys/sem.h>],
semtimedop(0,NULL,0,NULL);,AC_DEFINE(HAVE_SEMTIMEDOP,1,Some systems have semtimedop) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

FW_CHECK_RPC

echo "******************************"


FW_CHECK_MICROSOFT


dnl Default build variables.
RUDIMENTS_VERSION="0.27"
AC_SUBST(RUDIMENTS_VERSION)
AC_DEFINE_UNQUOTED(RUDIMENTS_VERSION,"$RUDIMENTS_VERSION",Version)
dnl rules for CURRENT:REVISION:AGE version info:
dnl apply the following rules in order:
dnl if library source changed at all,         c:r:a -> c:r+1:a
dnl if interfaces added, removed, or changed, c:r:a -> c+1:0:a
dnl if interfaces added,                      c:r:a -> c:r:a+1
dnl if interfaces removed,                    c:r:a -> c:r:0
SONAME_VERSION_INFO="1:0:0"
AC_SUBST(SONAME_VERSION_INFO)
AC_PREFIX_DEFAULT(/usr/local/firstworks)


dnl Output files.
echo
echo "***** Output Files ***********"
AC_CONFIG_HEADER(include/rudiments/private/config.h)
AC_CONFIG_SRCDIR(test/xmls.C)
AC_CONFIG_FILES(config.mk bin/rudiments-config features.mk strip-comment-note rudiments.pc)
AC_OUTPUT
chmod 755 bin/rudiments-config
chmod 755 strip-comment-note
echo "******************************"
echo
