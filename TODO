#122 - non-interactive tests
Update tests so that the output doesn't have to be visually inspected.  They should display success/failure like the SQL Relay tests, or similar.


#123 - modemclient - customatcommands
Add "customatcommands" thing to modemclient class.  I think this might be something we did at 4Access that never got ported over.



#125 - forward-port chat class changes
We made some changes at 4Access that need to be forward ported.


#126 - forward-port charstring methods
We added some methods to charstring at 4Access that need to be ported over.


#130 - heap fragmentation
reduce heap fragmentation where possible


#131 - update docs
lots of programming docs are missing, reference docs are out of date


#132 - MINGW port
Current issues:

* poll function missing?
* printf("%lld",...) doesn't work, it doesn't like the double-l
* how do I specify a read,write or read/write lock with LockFileEx - F_RDLCK, F_WRLCK, etc. need to be exposed in header file or something
* how do I F_GETLK
* chown - http://www.perlmonks.org/?node_id=70562
* crypt
* ssl/pcre


#133 - file descriptor passing
file descriptor passing doesn't work on openbsd, cygwin, possibly netbsd, maybe even others


#134 - netbsd-3.0 statvfs
Support:
* f_flag
* f_bsize/f_frsize/f_iosize seperately
* f_bresvd
* f_fsidx


#135 - deamonprocess constructor
daemonprocess constructor initializes static members, this is lame and messy



#137 - freebsd IBV6_V6ONLY socket option
Support the freebsd IBV6_V6ONLY socket option


#138 - sysctl
support the netbsd sysctl function


#139 - compression
should be able to associate a zlib handle with a file descriptor and read/write compressed data, just like ssl


#140 - fix math class
something is apparently not right in the math class and needs fixing


#141 - inline static methods
A bunch of static methods can probably be inlined.


#142 - dtd/schema validator
Add methods to validate an xml doc against a dtd or schema


#143 - invalid xml test
add a test that fails to parse various invalid xmls


#144 - CDATA/internal subset support
handle CDATA/internal subsets better


#145 - DOCTYPE-defined entities
xml classes need to support entities defined in the DOCTYPE declaration



#146 - link class
create a link class and move create*Link/resolveSymbolicLink into it



#147 - intervaltimer test
need tests for the intervaltimer class


#148 - dynamiclib tests
need tests for the dynamiclib class


#149 - math tests
need tests for the math class


#150 - rawbuffer tests
need tests for the rawbuffer class


#151 - memorymap tests
need tests for the memorymap class


#152 - mutex
need tests for the mutex class


#153 - serialportprofile tests
need tests for the serialportprofile class


#154 - directorylisting class
need a directorylisting class


#155 - pipe class
need a pipe class


#156 - tty class
need a tty class


#157 - pseudotty class
need a pseudotty class


#158 - shellcommand class
need a shellcommand class


#159 - system class
need a system class - ie. a class that lets you manipulate stuff about the system.

wrap uname, for instance


#160 - loginrecord class
need a loginrecord class - utmp/wtmp wrapper


#161 - messagequeue class
need a messagequeue class - wrapping IPC calls


#162 - thread class
need a thread class - wrapping pthreads and similar


#163 - table class
need a table class - dynamic 2d array


#164 - generic parser/lexer classes
develop generic parser/lexer classes, reimplement xmlsax using them


#165 - renovate client/server classes
* modemutil
* serialportutil
* inetsocketutil
 * sockaddrin
 * addr
 * port
* rawsocketutil
* fileutil
* unixsocketutil
 * sockaddrun
 * file
* msgqueueutil
* shmutil
* fifoutil
* pipeutil

* filedescriptor
 * read()
 * write()
 * close()
 * file : filedescriptor
  * open(filename,...)
  * device : file
  * serialport : file
  * fifo : file
 * pipe : filedescriptor
 * client : filedescriptor
  * initialize(namevaluepairs *nvp)=0
  * connect=0
  * modemclient : client, modemutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(device,initstring,dialstring,...)
   * connect()
   * connect(device,initstring,dialstring,...)
  * serialportclient : client, serialportutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(device,...)
   * connect()
   * connect(device,...)
  * socketclient : client
   * nonblock()
   * protected:
    * connect(...,timeout)
   * inetsocketclient : socketclient, inetsocketutil
    * initialize(namevaluepairs *nvp)=0
    * initialize(host,port,...)
    * connect()
    * connect(host,port,...)
   * unixsocketclient : socketclient, unixsocketutil
    * initialize(namevaluepairs *nvp)=0
    * initialize(filename,...)
    * connect()
    * connect(filename,...)
   * rawsocketclient : client, rawsocketutil
    * initialize(namevaluepairs *nvp)=0
    * initialize(???,...)
    * connect()
    * connect(???,...)
  * fileclient  : client, fileutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(filename,...)
   * connect()
   * connect(filename,...)
  * msgqueueclient : client, msgqueueutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(key,...)
   * connect()
   * connect(key,...)
  * shmclient : client, shmutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(key,...)
   * connect()
   * connect(key,...)
  * fifoclient : client, fifoutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(filename,...)
   * connect()
   * connect(filename,...)
  * pipeclient : client, pipeutil
   * initialize(namevaluepairs *nvp)=0
   * initialize(???,...)
   * connect()
   * connect(???,...)
  * ...
 * server : filedescriptor
  * bind()=0
  * listen()=0
  * filedescriptor *accept()=0
  * modemserver: server, modemutil
   * initialize(device,initstring,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(device,initstring,...)
  * serialportserver: server, serialportutil
   * initialize(device,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(device,...)
  * socketserver: server
   * linger()
   * reuseaddr()
   * nonblock()
   * listen()
   * protected:
    * sslAccept()
   * inetsocketserver: socketserver, inetsocketutil
    * initialize(addr,port,...)
    * bind()
    * filedescriptor *accept()
    * listen(addr,port,...)
   * unixsocketserver: socketserver, unixsocketutil
    * initialize(filename,...)
    * bind()
    * filedescriptor *accept()
    * listen(filename,...)
   * rawsocketserver: server, rawsocketutil
    * initialize(???,...)
    * bind()
    * filedescriptor *accept()
    * listen(???,...)
  * fileserver: server, fileutil
   * initialize(filename,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(filename,...)
  * msgqueueserver: server, msgqueueutil
   * initialize(key,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(key,...)
  * shmserver: server, shmutil
   * initialize(key,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(key,...)
  * fifoserver: server, fifoutil
   * initialize(filename,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(filename,...)
  * pipeserver: server, pipeutil
   * initialize(???,...)
   * bind()
   * listen()
   * filedescriptor *accept()
   * listen(???,...)
  * ...


#166 - charstring class enhancements
wrap: string.h/strings.h - strxfrm(_l)(), strcoll()



#167 - wordexpansion class
wrap:

wordexp.h - wordexp()/wordfree() - shell-like word expansion (~,?,*,etc.)
fnmatch.h - fnmatch()
glob.h - glob()/globfree()


#168 - quota class
bsd/linux - sys/quota.h - quotactl() function, macros, defines
solaris uses ioctl


#169 - filesystem class enhancements
wrap:

bsd/linux only - fstab.h - /etc/fstab parser
* getfsent(),getfsspec(),getfsfile(),setfsent(),endfsent()

sunos/linux only - mntent.h - read/write fstab, mtab, etc.
* setmntent(),getmntent(_r)()
* addmntent(),endmntent(),hasmntopt()

linux only - sys/mount.h
* mount(),umount(),umount2()


#170 - timer class
not on many platforms...

time.h and sys/time.h -
* clock_getres(), clock_gettime(), clock_settime()
* clock_nanosleep(), clock_getcpuclockid()
* timer_create(), timer_delete(), timer_settime(),
* timer_gettime(), timer_getoverrun()
 * CLOCK_REALTIME
 * CLOCK_MONOTONIC
 * CLOCK_PROCESS_CPUTIME_ID
 * CLOCK_THREAD_CPUTIME_ID


#171 - filedescriptor class enhancements
wrap:

filedescriptor class:
* fcntl.h - fcntl()
 * F_GETFL - get flags
  * O_RDONLY,O_WRONLY,O_RDWR,O_CREAT,O_EXCL,O_TRUNC,
  * O_APPEND,O_ASYNC,O_DIRECT,O_NOATIME,O_NONBLOCK
 * F_SETFL - set flags
  * O_APPEND,O_ASYNC,O_DIRECT,O_NOATIME,O_NONBLOCK
 * F_GET/SETOWN - get/set process group that will receive
  * signals on i/o availability
 * F_GET/SETSIG - get/set what signal to send to process
  * group on i/o/availability

* sys/select.h - select(),pselect()

* sys/poll.h - poll()

* sys/uio.h - readv()/writev()

* linux only - 
 * sys/sendfile.h - sendfile()

* not in many systems - 
 * sys/epoll.h - epoll functions for speeding up network io
  * epoll_create(),epoll_ctl(),epoll_wait()
 * aio.h - aio_init(),aio_read(),aio_write(),lio_listio(),
 * aio_error(),aio_return(),aio_cancel(),
 * aio_suspend(),aio_fsync()


#172 - enhancements to signal classes
signals:
* stdlib.h - abort(), atexit(), exit(), _Exit()
* string.h - strsignal()
* unistd.h - pause(), _exit()
* setjmp.h - setjmp()/longjump()/sigsetjump() - save stack contexts
* signal.h - signal stuff - need to implement more of this
 * sysv_signal(),bsd_signal(),signal()
 * kill(),killpg(),raise()
 * ssignal(),gsignal()
 * psignal()
 * sigpause(),sigblock()
 * sigsetmask(),siggetmask()
 * sigemptyset(),sigfillset(),sigaddset(),sigdelset()
 * sigismember(),sigisemptyset(),sigandset,sigorset()
 * sigprocmask(),sigaction(),sigpending(),sigwait(),
 * sigwaitinfo(),sigtimedwait(),sigqueue()
 * sigvec(),sigreturn(),siginterrupt(),
 * sigstack(),signalstack()
 * sighold(),sigrelse(),sigignore(),sigset()
* sys/wait.h - wait(),wait3(),wait4(),waitpid()

* not in many systems - 
  * stdlib.h - on_exit()
  * sys/wait.h - waitid()


#173 - catalog class
nl_types.h - catopen()/catgets()/catclose()



#174 - internationalization class
* langinfo.h - locale info functions
* locale.h/xlocale.h - setlocale, localeconv, etc.
* iconv.h - character set conversion
* libintl.h - gettext functions
* stdlib.h - rpmatch() - response match
* libicu


#175 - enhancements to network classes
wrap:

* unistd.h - gethostname()/sethostname()
* netdb.h - netgroup functions
 * herror(),hstrerror()
 * rcmd(_af)(),rexec(_af)(),ruserok(_af)(),rresvport(_af)()
 * gai_strerror(),getnameinfo(),getaddrinfo_a(),
* resolv.h - resolver functions, lots of these
* sys/socket.h - socket(),socketpair(),
 * getsockname(),getpeername(),
 * bind(),listen(),accept(),
 * connect(),
 * send(),recv(),
 * sendto(),recvfrom(),
 * sendmsg(),recvmsg(),
 * getsockopt(),setsockopt(),
 * shutdown()
* net/if.h - physical interface structs/defines
* net/if_arp.h - arp protocol structs/defines
* net/route.h - routing structs/defines
* netinet/in.h - ntohl,ntohs,htoln,htons
* netinet/icmp6.h - icmp structs
* netinet/if_ether.h - more arp structs???
* netinet/igmp.h - igmp structs???
* netinet/tcp.h - #defines for setsockopt, tcp packet structs
* netinet/udp.h - udp packet structs

not on solaris -
 * unistd.h - getdomainname()/setdomainname()
 * netdb.h - gai_suspend(),gai_error(),gai_cancel()
 * ifaddrs.h - discover network interfaces
  * getifaddrs(),freeifaddrs()
 * net/if_packet.h - packet sockets structs/defines
 * net/if_ppp.h - ppp interfaces structs/defines
 * netinet/in.h - ip/ipv6 address structs,
  * bindresvport(),bindresvport6()
  * inet6_option_space()
  * inet6_option_init()
  * inet6_option_append()
  * inet6_option_alloc()
  * inet6_option_next()
  * inet6_option_find()
 * netinet/ip.h - ip packet structs
 * netinet/ip6.h - ipv6 packet structs
 * netinet/ip_icmp.h - icmp packet structs'

not on many systems -
 * sys/socket.h - sockatmark()
 * net/ethernet.h - ethernet interface structs/defines
 * net/if_shaper.h - traffic shaper structs/defines
 * net/if_slip.h - slip interfaces structs/defines
 * netinet/if_fddi.h - fddi packet struct???
 * netinet/if_tr.h - ???
 * netinet/ether.h - ethernet addresses to acii and back
  * ether_ntoa(_r)()
  * ether_aton(_r)()
  * ether_ntohost()
  * ether_hostton()
  * ether_line()
 * netpacket/packet.h - raw packet structs


#248 - haiku install fails
Installation on haiku fails because libtool likes to make temporary files with #'s in them and haiku wants those to be quoted.

Also, the standard /usr/local/firstworks path isn't where haiku likes stuff to be installed.  We should detect Haiku and install in a more appropriate place.


#263 - curl integration into file/directory classes
open/close/read/write/etc. any url that curl can access


#264 - mingw32 semaphoreset
I've completed a partial implementation of semaphoreset.  However, it needs a lot of work.  There are several methods that return false or some error that there is probably some way of implementing correctly.

Also, there needs to be a method for getting the name of a semaphore and connecting to an existing one, by name.


#265 - mingw32 signals
Windows doesn't support signals per se.  All signal handling is faked in windows.  Windows sends messages between processes, some of which correspond to what would be signals on unix.  It might be possible to reimplement the signal handling classes to pass messages.


#266 - mingw32 crypt
Windows doens't have crypt_r() or anything like it.  I'll have to implement it directly.  I may need to steal some code from uclibc or glibc.


#267 - mingw32 intervaltimer
Windows doesn't have set/getitimer or anything like them.  It doesn't even have alarm().  There's probably some way to do it though.


#268 - mingw32 serialportprofile
Windows has a very different serial-port architecture.

See:
http://stackoverflow.com/questions/933745/what-is-the-windows-equivalent-to-the-capabilities-defined-in-sys-select-h-and-te


#269 - longs, ints and shorts
there are still lots of methods that use short, int and long rather than (u)intX_t.

convert them.


#270 - mingw32 daemonprocess
the detach() method needs to be ported


#271 - fork/exec in process class
fork() and exec() need to be wrapped in the process class


#272 - msvc++ abi compatibility
g++ uses a very different abi than msvc++.

Further, the msvc++ abi has changed with every release.

Is this an issue?  All non-C++ SQL Relay API's use extern "C", so they should be compatible with languages compiled with whatever compiler.

To get VB and C# compatibility, I'd have to make COM objects, which again, would be cross-abi compatible.

The only issue is linking the rudiments or sqlrelay C++ api's directly into a C++ program written using MSVC++.  Those programs could use the COM objects though.


#273 - poll/select/pselect
These functions all appear to do fundamentally the same thing, but with higher resolution clocks, and some platforms don't have one or the other.  Sort this out and only use one per platform.


#274 - pthread macros on minix
the !__pthread_read,write,connect and fork macros on minix are causing problems for classes which call filedescriptor::read/write and client::connect.  I may have to move them into the header files or something.


#291 - minix 315 connects
the handoffclient test fails after 315 tries


