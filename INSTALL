BASIC INSTALL:

	To compile rudiments type:

		./configure
		make

	To install rudiments become superuser and type:

		make install

	Libraries are installed in /usr/local/firstworks/lib
	Includes are installed in /usr/local/firstworks/include

	To uninstall rudiments become superuser and type:

		make uninstall



CUSTOM INSTALL:


	The default installation prefix is /usr/local/firstworks.
	The libraries are installed in /usr/local/firstworks/lib and
	the header files are in /usr/local/firstworks/include.

	The /usr/local/firstworks part of these paths may be changed to any 
	other directory by invoking configure with the --prefix option.

		For example:
			./configure --prefix=/usr/local

	This invocation would cause the libraries to be installed in
	/usr/local/lib and the header files to be installed 
	in /usr/local/include.



	To compile rudiments, first type:

		./configure

	This will generate a file called config.mk containing some
	compile time options.  Edit this file to your liking.  If you
	run configure again, you will have to edit the file again.

	Then type:

		make

	To install rudiments become superuser and type:

		make install

	To uninstall rudiments become superuser and type:

		make uninstall


RPM INSTALL:

	If your system supports RedHat Package Manager RPM version 4.0.3 or
	greater then you can build RPMS by running the following command
	against the distribution tarball:

		rpm -ta rudiments-xxx.tar.gz

	(where xxx is replaced with the version number)

	This will generate RPM's in the system-wide RPM directory (usually
	/usr/src/redhat/RPMS or /usr/local/rpm/RPMS) under the subdirectory
	corresponding to your system architecture.  You can install them by
	changing directories into that directory and executing the following
	command as root:

		rpm -i rudiments-*

DEBIAN INSTALL:

	If you are a Debian user, you can install pre-build packages found
	on <http://web.green.ch/fweps/>. Since you didn't, you can build
	packages from this directory by typing

		debian/rules binary
	as root, or
		fakeroot debian/rules binary
	or
		sudo debian/rules binary
	
	This will generate .deb packages in the parent directory. You can
	install them by changing directories into .. and executing the
	following command as root:

		dpkg -i *.deb

CROSS-COMPILE:

	If you need to build libraries for a differnet platform than the one
	you're running, you can use the --host option to instruct the build
	process to use a cross-compiler toolchain instead of the native
	compiler.

	Let's assume that you have a cross-compiler toolchain for arm-linux.
	Run the configure command as follows:

		./configure --host=arm-linux

	In this example, the --host option instructs the build process to use
	the arm-linux prefix when deciding what tools to use.  The build process
	will use the following tools:

		arm-linux-gcc
		arm-linux-g++
		arm-linux-ar
		arm-linux-ranlib
		arm-linux-ld

	If you are unsure what to use for your --host option, look for g++
	in your cross-compiler toolchain and use whatever it's prefixed with.

	If the tools in your cross-compiler toolchain have no prefix, you can
	manually select them by setting some environment variables to the
	absolute pathnames of the tools before running configure:

		CC=/usr/local/arm-linux/bin/gcc
		CXX=/usr/local/arm-linux/bin/g++
		AR=/usr/local/arm-linux/bin/ar
		RANLIB=/usr/local/arm-linux/bin/ranlib
		LD=/usr/local/arm-linux/bin/ld
		./configure
